/*!
 * \file fastuidraw_painter_arc_stroke.frag.glsl.resource_string
 * \brief file fastuidraw_painter_arc_stroke.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

#ifdef FASTUIDRAW_RENDER_TO_COLOR_BUFFER
vec4
#else
float
#endif
fastuidraw_gl_frag_main(in uint sub_shader,
                        inout uint shader_data_block)
{
  #if defined(FASTUIDRAW_RENDER_TO_COLOR_BUFFER) && defined(FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE)
    {
      shader_data_block += fastuidraw_stroke_shader_data_size;
      return vec4(fastuidraw_read_deferred_coverage_buffer);
    }
  #else
    {
      float alpha = 1.0;
      uint dash_style;

      dash_style = sub_shader;

      float r, d, q, qw, ql, qlw;
      float S, R, raw_theta, raw_thetaw, recip_S;

      r = length(vec2(fastuidraw_arc_stroking_relative_to_center_x,
                      fastuidraw_arc_stroking_relative_to_center_y));

      S = fastuidraw_arc_stroking_stroke_radius;
      recip_S = 1.0 / S;
      R = fastuidraw_arc_stroking_arc_radius;
      if (dash_style != fastuidraw_stroke_not_dashed)
        {
          if ((fastuidraw_arc_stroking_dash_bits & fastuidraw_arc_stroke_inverted_inner_region_mask) != 0u)
            {
              S = fastuidraw_arc_stroking_stroke_radius - fastuidraw_arc_stroking_arc_radius;
              R = 0.0;
            }
        }

      q = S - abs(r - R);
      qw = fwidth(q);
      d = max(abs(q), qw);

      ql = 1.0 - fastuidraw_arc_stroking_relative_to_center_x;
      qlw = fwidth(ql);

      raw_theta = atan(fastuidraw_arc_stroking_relative_to_center_y,
                       fastuidraw_arc_stroking_relative_to_center_x);
      raw_thetaw = fwidth(raw_theta);
      if ((fastuidraw_arc_stroking_dash_bits & fastuidraw_arc_stroke_negative_arc_angle_mask) != 0u)
        {
          raw_theta = -raw_theta;
        }

      fastuidraw_stroking_distance = fastuidraw_arc_shader_stroking_distance_real;
      if (fastuidraw_arc_stroking_arc_radius > -0.5)
        {
          fastuidraw_stroking_distance += raw_theta * fastuidraw_arc_stroking_arc_radius;
          fastuidraw_stroking_relative_distance_from_center = q * recip_S;
        }
      else
        {
          fastuidraw_stroking_relative_distance_from_center = ql;
        }

      if (dash_style != fastuidraw_stroke_not_dashed)
        {
          float theta, thetaw, dist, distw, bd, bdw;

          dist = fastuidraw_arc_shader_stroking_distance;
          distw = fwidth(fastuidraw_arc_shader_stroking_distance);
          theta = raw_theta;
          thetaw = raw_thetaw;

          if ((fastuidraw_arc_stroking_dash_bits & fastuidraw_stroke_gauranteed_to_be_covered_mask) == 0u)
            {
              if (fastuidraw_arc_stroking_arc_radius > -0.5)
                {
                  dist += theta * fastuidraw_arc_stroking_arc_radius;
                  distw = thetaw * fastuidraw_arc_stroking_arc_radius;
                  bd = 1.0 - q * recip_S;
                  bdw = qw * recip_S;
                }
              else
                {
                  bd = fastuidraw_arc_stroking_relative_to_center_x;
                  bdw = qlw;
                }

              bool dont_anti_alias_dash_boundary, skip_lookup;

              skip_lookup =
                (fastuidraw_arc_stroking_dash_bits & fastuidraw_stroke_skip_dash_interval_lookup_mask) != 0u;

              #ifdef FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE
                {
                  dont_anti_alias_dash_boundary =
                    (fastuidraw_arc_stroking_dash_bits & fastuidraw_stroke_distance_constant) != 0u;
                }
              #else
                {
                  dont_anti_alias_dash_boundary = true;
                }
              #endif

              if (dash_style == fastuidraw_stroke_dashed_flat_caps)
                {
                  alpha = FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage)(shader_data_block, dist, distw,
                                                                                    skip_lookup, dont_anti_alias_dash_boundary);
                }
              else
                {
                  alpha = FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage)(dash_style == fastuidraw_stroke_dashed_rounded_caps,
                                                                  dash_style == fastuidraw_stroke_dashed_square_caps,
                                                                  shader_data_block,
                                                                  dist, distw, bd, bdw,
                                                                  fastuidraw_arc_shader_stroking_distance_sub_edge_start,
                                                                  fastuidraw_arc_shader_stroking_distance_sub_edge_end,
                                                                  skip_lookup, dont_anti_alias_dash_boundary);
                }

              #if !defined(FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE)
                {
                  if (alpha < 1.0 - 1.0 / 255.0)
                    {
                      FASTUIDRAW_DISCARD;
                    }
                  else
                    {
                      alpha = 1.0;
                    }
                }
              #endif
            }
        }

      /* A negtive arc_radius indicates that it is a segment */
      if (fastuidraw_arc_stroking_arc_radius > -0.5)
        {
          #if defined(FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE)
            {
              alpha *= max(0.0, q / d);
            }
          #else
            {
              if (q < 0.0)
                {
                  FASTUIDRAW_DISCARD;
                }
              alpha = 1.0;
            }
          #endif
        }
      else
        {
          #if defined(FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE)
            {
              float dd;
              q = 1.0;
              dd = max(ql, qlw);
              alpha *= ql / dd;
            }
          #else
            {
              alpha = 1.0;
            }
          #endif
        }

      shader_data_block += fastuidraw_stroke_shader_data_size;
      #ifdef FASTUIDRAW_RENDER_TO_COLOR_BUFFER
        {
          return vec4(alpha);
        }
      #else
        {
          return alpha;
        }
      #endif
    }
  #endif
}
