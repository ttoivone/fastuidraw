/*!
 * \file fastuidraw_painter_stroke.frag.glsl.resource_string
 * \brief file fastuidraw_painter_stroke.frag.glsl.resource_string
 *
 * Copyright 2018 by Intel.
 *
 * Contact: kevin.rogovin@intel.com
 *
 * This Source Code Form is subject to the
 * terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with
 * this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 *
 * \author Kevin Rogovin <kevin.rogovin@intel.com>
 *
 */

#ifdef FASTUIDRAW_RENDER_TO_COLOR_BUFFER
vec4
#else
float
#endif
fastuidraw_gl_frag_main(in uint sub_shader,
                        inout uint shader_data_block)
{
  #if defined(FASTUIDRAW_RENDER_TO_COLOR_BUFFER) && defined(FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE)
    {
      shader_data_block += fastuidraw_stroke_shader_data_size;
      return vec4(fastuidraw_read_deferred_coverage_buffer);
    }
  #else
    {
      float alpha = 1.0;
      uint dash_style;

      dash_style = sub_shader;
      fastuidraw_stroking_distance = fastuidraw_shader_stroking_distance_real;
      if (dash_style != fastuidraw_stroke_not_dashed)
        {
          if ((fastuidraw_stroking_dash_bits & fastuidraw_stroke_gauranteed_to_be_covered_mask) == 0u)
            {
              float fwidth_fastuidraw_stroking_shader_distance = fwidth(fastuidraw_stroking_shader_distance);
              float fwidth_fastuidraw_stroking_on_boundary = fwidth(fastuidraw_stroking_on_boundary);

              if ((fastuidraw_stroking_dash_bits & fastuidraw_stroke_gauranteed_to_be_covered_mask) != 0u)
                {
                  alpha = 1.0;
                }
              else
                {
                  alpha = FASTUIDRAW_LOCAL(fastuidraw_stroke_compute_dash_coverage)(dash_style == fastuidraw_stroke_dashed_rounded_caps,
                                                                  dash_style == fastuidraw_stroke_dashed_square_caps,
                                                                  shader_data_block,
                                                                  fastuidraw_stroking_shader_distance,
                                                                  fwidth_fastuidraw_stroking_shader_distance,
                                                                  fastuidraw_stroking_on_boundary,
                                                                  fwidth_fastuidraw_stroking_on_boundary,
                                                                  fastuidraw_stroking_shader_distance_sub_edge_start,
                                                                  fastuidraw_stroking_shader_distance_sub_edge_end,
                                                                  (fastuidraw_stroking_dash_bits & fastuidraw_stroke_skip_dash_interval_lookup_mask) != 0u,
                                                                  (fastuidraw_stroking_dash_bits & fastuidraw_stroke_distance_constant) != 0u);
                }
            }
        }

      #if !defined(FASTUIDRAW_STROKING_USE_DEFFERRED_COVERAGE)
        {
          if (alpha < 1.0 - 1.0 / 255.0)
            {
              FASTUIDRAW_DISCARD;
            }
          alpha = 1.0;
        }
      #else
        {
          float dd, q;

          // modulate by coverage to boundary
          q = 1.0 - fastuidraw_stroking_on_boundary;
          dd = max(q, fwidth(q));
          alpha *= q / dd;

          dd = max(fastuidraw_stroking_on_contour_boundary, fwidth(fastuidraw_stroking_on_contour_boundary));
          alpha *= fastuidraw_stroking_on_contour_boundary / dd;
        }
      #endif

      shader_data_block += fastuidraw_stroke_shader_data_size;
      #ifdef FASTUIDRAW_RENDER_TO_COLOR_BUFFER
        {
          return vec4(alpha);
        }
      #else
        {
          return alpha;
        }
      #endif
    }
  #endif
}
